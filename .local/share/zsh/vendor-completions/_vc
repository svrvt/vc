#compdef vc
function __vcsh_repositories () {
	local -a repos
	repos=( ${(f)"$(_call_program repositories vcsh list)"} )
  repos=( "${repos[@]#vc_}" )

	_describe -t repositories 'repository' repos
}

function __vcsh_not_implemented_yet () {
	_message "Subcommand completion '${1#*-}': not implemented yet"
}

function _vc-clone () {
	__vcsh_not_implemented_yet "$0" #TODO
}

function _vc-delete () {
	(( CURRENT == 2 )) && __vcsh_repositories
}

function _vc-enter () {
	(( CURRENT == 2 )) && __vcsh_repositories
}

function _vc-foreach () {
	_dispatch vcsh-foreach git
}

function _vc-help () {
	_nothing
}

function _vc-init () {
	_nothing
}

function _vc-list () {
	_nothing
}

function _vc-list-tracked () {
	(( CURRENT == 2 )) && __vcsh_repositories
}

function _vc-list-untracked () {
	_nothing
}

function _vc-run () {
	(( CURRENT == 2 )) && __vcsh_repositories
	(( CURRENT == 3 )) && _command_names -e
	if (( CURRENT >= 4 )); then
		# see _precommand in zsh
		words=( "${(@)words[3,-1]}" )
		(( CURRENT -= 2 ))
		_normal
	fi
}

function _vc-status () {
	(( CURRENT == 2 )) && __vcsh_repositories
}

function _vc-upgrade () {
	(( CURRENT == 2 )) && __vcsh_repositories
}

function _vc-version () {
	_nothing
}

function _vc-which () {
	_files
}

function _vc-write-gitignore () {
	(( CURRENT == 2 )) && __vcsh_repositories
}

function _vc () {
	local curcontext="${curcontext}" return
	local state vccommand
	local -a args subcommands

	local VCSH_REPO_D
	: ${VCSH_REPO_D:="${XDG_CONFIG_HOME:-"$HOME/.config"}/vcsh/repo.d"}

	subcommands=(
		# "clone:clone an existing repository"
		# "commit:commit in all repositories"
		# "delete:delete an existing repository"
		# "enter:enter repository; spawn new <\$SHELL>"
		# "foreach:execute for all repos"
		# "help:display help"
		# "init:initialize an empty repository"
		# "list:list all local vcsh repositories"
		# "list-tracked:list all files tracked by vcsh"
		# "list-untracked:list all files not tracked by vcsh"
		# "pull:pull from all vcsh remotes"
		"push:push to vcsh remotes"
		# "rename:rename a repository"
		# "run:run command with <\$GIT_DIR> and <\$GIT_WORK_TREE> set"
		"status:show statuses of all/one vcsh repositories"
		# "upgrade:upgrade repository to currently recommended settings"
		# "version:print version information"
		# "which:find <substring> in name of any tracked file"
		# "write-gitignore:write .gitignore.d/<repo> via git ls-files"
	)

	args=(
		'-c[source <file> prior to other configuration files]:config files:_path_files'
		'-d[enable debug mode]'
		'-v[enable verbose mode]'
		'*:: :->subcommand_or_options_or_repo'
	)

	_arguments -C ${args} && return

	if [[ ${state} == "subcommand_or_options_or_repo" ]]; then
		if (( CURRENT == 1 )); then
			# _describe -t subcommands 'vc sub-commands' subcommands && ret=0
			__vcsh_repositories && ret=0
		else
			vccommand="${words[1]}"
      case ${vccommand} in 
      vc)
        state=${vccommand}
      ;;
      *)
        state=vc_${vccommand}
      ;;
      esac

			if ! (( ${+functions[_vc-$vccommand]} )); then
				# There is no handler function, so this is probably the name
				# of a repository. Act accordingly.
				# FIXME: this may want to use '_dispatch vcsh git'
				GIT_DIR=$VCSH_REPO_D/$state.git _dispatch git git && ret=0
			else
				curcontext="${curcontext%:*:*}:vc-${vccommand}:"
				_call_function ret _vc-${vccommand} && (( ret ))
			fi
		fi
	fi
	return ret
}

_vc "$@"
